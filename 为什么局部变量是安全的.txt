1. 每个方法在调用栈里都有自己的独立空间，称为栈帧，每个栈帧里都有对应方法需要的参数和返回地址。
当调用方法时，会创建新的栈帧，并压入调用栈；当方法返回时，对应的栈帧就会被自动弹出。
也就是说，栈帧和方法是同生共死的。

2. 两个线程可以同时用不同的参数调用相同的方法，那调用栈和线程之间是什么关系呢？
答案是：每个线程都有自己独立的调用栈。因为如果不是这样，那两个线程就互相干扰了。

3. 方法里的局部变量，因为不会和其他线程共享，所以没有并发问题，这个思路很好，
已经成为解决并发问题的一个重要技术，同时还有个响当当的名字叫做线程封闭，
比较官方的解释是：仅在单线程内访问数据。
由于不存在共享，所以即便不同步也不会有并发问题，性能杠杠的。
