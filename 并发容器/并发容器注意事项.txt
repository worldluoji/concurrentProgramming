1.组合操作需要注意静态条件问题
SafeArrayList<T>{
  // 封装 ArrayList
  List<T> c = new ArrayList<>();
  // 控制访问路径
  synchronized
  T get(int idx){
    return c.get(idx);
  }

  synchronized
  void add(int idx, T t) {
    c.add(idx, t);
  }

  synchronized
  boolean addIfNotExist(T t){
    if(!c.contains(t)) {
      c.add(t);
      return true;
    }
    return false;
  }
}
这里addIfNotExist就包含了组合操作，判断c.contains(t)这里多个线程可能重入，所以加了synchronized进行保护。

2.遍历时需要注意静态条件：
List list = Collections.
  synchronizedList(new ArrayList());
synchronized (list) {  
  Iterator i = list.iterator(); 
  while (i.hasNext())
    foo(i.next());
}    
synchronizedList只保证内部的各个方法是synchronized，但是遍历时，组合起来就不能保证组合操作的原子性了，所以加了synchronized (list)

3. ConcurrentHashMap 的 key 是无序的，而ConcurrentSkipListMap的Key是有序的。如果需要保证key的顺序，就要使用ConcurrentSkipListMap.

4. Set也有CopyOnWriteArraySet和ConcurrentSkipListSet.　使用方法和CopyOnWriteArrayList类似.

5. Java7中的HashMap在执行put操作时会涉及到扩容，由于扩容时链表并发操作会造成链表成环，所以可能导致cpu飙升100%

