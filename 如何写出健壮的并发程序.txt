1. 迫不得已才使用低级同步原语。低级同步原语主要是指synchronized, Lock, Semaphore，这些看似简单但使用起来却没有那么简单，容易引发问题，一定要谨慎使用，使用时要满足下面的几条准则：
永远只在更新对象的成员变量时加锁 　没有更新就不存在互斥问题，也就不需要加锁。
永远只在访问可变的成员变量时加锁　不可变的成员变量本身就是线程安全的。
永远不在调用其他对象的方法时加锁　可能其他类有方法也会加锁，就有可能造成死锁；即使其他类没有加锁，也可能存在很慢的IO操作，或sleep()调用，导致性能问题。

２．优先使用成熟的工具类，比如Java SDK提供的ConCurrentHashMap，　CopyonWriteArrayList等数据结构，比如Java 8提供的CompletableFuture和CompletableService，比如distrutor框架。

３．避免过早优化，并发程序首先保证安全性，出现性能瓶颈后再优化。
