1. 迫不得已才使用低级同步原语。低级同步原语主要是指synchronized, Lock, Semaphore，这些看似简单但使用起来却没有那么简单，容易引发问题，一定要谨慎使用，使用时要满足下面的几条准则：
永远只在更新对象的成员变量时加锁 　没有更新就不存在互斥问题，也就不需要加锁。
永远只在访问可变的成员变量时加锁　不可变的成员变量本身就是线程安全的。
永远不在调用其他对象的方法时加锁　可能其他类有方法也会加锁，就有可能造成死锁；即使其他类没有加锁，也可能存在很慢的IO操作，或sleep()调用，导致性能问题。

2. 优先使用成熟的工具类，比如Java SDK提供的ConCurrentHashMap，　CopyonWriteArrayList等数据结构，比如Java 8提供的CompletableFuture和CompletableService，比如distrutor框架。

3. 避免过早优化，并发程序首先保证安全性，出现性能瓶颈后再优化。

4. 注意安全性、活跃性和性能问题
1）安全性：
数据竞争： 多个线程同时访问一个数据，并且至少有一个线程会写这个数据。
竞态条件： 程序的执行结果依赖程序执行的顺序。
也可以按照以下的方式理解竞态条件： 程序的执行依赖于某个状态变量，在判断满足条件的时候执行，但是在执行时其他变量同时修改了状态变量。
if (状态变量 满足 执行条件) {
  执行操作
}
问题： 数据竞争一定会导致程序存在竞态条件吗？有没有什么相关性？

2）活跃性：
死锁、活锁、饥饿
这里解释一下什么是饥饿：举个例子前面提到的要尽量用notifyAll而不是notify，就是为了防止饥饿，即某个线程
长期得不到调度；还有是ReenTrantLock,可以指定公平锁，那么等待最长的线程会优先获取锁，这也就防止了饥饿。

3）性能：
核心就是在保证安全性和活跃性的前提下，根据实际情况，尽量降低锁的粒度。即尽量减少持有锁的时间。
JDK的并发包里，有很多特定场景针对并发性能的设计。例如使用细粒度的锁，
一个典型的例子就是 Java 并发包里的 ConcurrentHashMap，它使用了所谓分段锁的技术；
还可以使用读写锁，也就是读是无锁的，只有写的时候才会互斥。
还有很多无锁化的设计，例如线程本地存储 (Thread Local Storage, TLS)、写入时复制 (Copy-on-write)、乐观锁等；
Java 并发包里面的原子类也是一种无锁的数据结构；Disruptor 则是一个无锁的内存队列，性能都非常好……

5. 组合操作往往隐藏着竞态条件问题，即便每个操作都能保证原子性，也并不能保证组合操作的原子性，这个一定要注意。
比如下面通过迭代器遍历的代码：
List list = Collections.synchronizedList(new ArrayList());
Iterator i = list.iterator(); 
while (i.hasNext())
  foo(i.next());
就存在并发问题。
而正确的做法应该是：
List list = Collections.synchronizedList(new ArrayList());
synchronized (list) {  
  Iterator i = list.iterator(); 
  while (i.hasNext())
    foo(i.next());
}
Java 提供的同步容器还有 Vector、Stack 和 Hashtable，这三个容器不是基于包装类实现的，
但同样是基于 synchronized 实现的，对这三个容器的遍历，同样要加锁保证互斥。

6. CopyOnWriteArrayList 仅适用于写操作非常少的场景，而且能够容忍读写的短暂不一致。
另一个需要注意的是，CopyOnWriteArrayList 迭代器是只读的，不支持增删改。

7. Map 接口的两个实现是 ConcurrentHashMap 和 ConcurrentSkipListMap
1） 主要区别在于 ConcurrentHashMap 的 key 是无序的，而 ConcurrentSkipListMap 的 key 是有序的。
2） 使用 ConcurrentHashMap 和 ConcurrentSkipListMap 需要注意的地方是，它们的 key 和 value 都不能为空，
否则会抛出NullPointerException这个运行时异常。
3）如果key冲突比较大，hashmap还是要靠链表或者tree来解决冲突的，所以O(1)是理想值。
同时增删改操作很多也影响hashmap性能。这个也是要看冲突情况。也就是说hashmap的稳定性差，
如果很不幸正好偶遇它的稳定性问题，同时又接受不了，就可以尝试skiplistmap，
它能保证稳定性，无论你的并发量是多大，也没有key冲突的问题。

8. Queue中， 只有 ArrayBlockingQueue 和 LinkedBlockingQueue 是支持有界的，所以在使用其他无界队列时，
一定要充分考虑是否存在导致 OOM 的隐患。