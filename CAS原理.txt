CAS,即Compare And Swap.　其来源于CPU,　CPU要保证其指令的原子性，就使用了CAS技术，即只有当内存地址A处的值等于期望值B时，才能更新为新值C.
１．通俗的讲，CAS就是说只有当当前值count和期望值except相等时，才会将count值更新为newValue.
例１：模拟一个CAS操作
class SimulatedCAS{
  volatile int count;
  // 实现 count+=1
  addOne(){
    do {
      newValue = count+1; //①
    }while(count !=
      cas(count,newValue) //②
  }
  // 模拟实现 CAS，仅用来帮助理解
  synchronized int cas(
    int expect, int newValue){
    // 读目前 count 的值
    int curValue = count;
    // 比较目前 count 值是否 == 期望值
    if(curValue == expect){
      // 如果是，则更新 count 的值
      count= newValue;
    }
    // 返回写入前的值
    return curValue;
  }
}
可见，CAS，完全没有加锁和解锁操作，相对于互斥锁来说，性能好了很多。

例２：AutomicLong的getAndIncrement()实现就是使用了CAS操作：
final long getAndIncrement() {
  return unsafe.getAndAddLong(
    this, valueOffset, 1L);
}
// o+offset就是当前对象在内存中的地址
public final long getAndAddLong(
  Object o, long offset, long delta){
  long v;
  do {
    // 读取内存中的值
    v = getLongVolatile(o, offset);
  } while (!compareAndSwapLong(
      o, offset, v, v + delta));
  return v;
}
// 原子性地将变量更新为 x
// 条件是内存中的值等于 expected
// 更新成功则返回 true
native boolean compareAndSwapLong(
  Object o, long offset, 
  long expected,
  long x);

２．常用方法：
getAndIncrement() // 原子化 i++
getAndDecrement() // 原子化的 i--
incrementAndGet() // 原子化的 ++i
decrementAndGet() // 原子化的 --i
// 当前值 +=delta，返回 += 前的值
getAndAdd(delta) 
// 当前值 +=delta，返回 += 后的值
addAndGet(delta)
//CAS 操作，返回是否成功
compareAndSet(expect, update)
// 以下四个方法
// 新值可以通过传入 func 函数来计算
getAndUpdate(func)
updateAndGet(func)
getAndAccumulate(x,func)
accumulateAndGet(x,func)

３.利用 AtomicReference、AtomicStampedReference或AtomicMarkableReference可以实现对象引用的原子更新。而后两个可以解决ABA问题。ABA问题即线程１取值时发现满足预期，但这时候可能是线程２加了１，而线程３减了１，对于数字当然没有影响，但是如果是对象，就可能出问题了。最简单的解决方法就是加上版本号（乐观锁）。

思考题:
public class SafeWM {
  class WMRange{
    final int upper;
    final int lower;
    WMRange(int upper,int lower){
    // 省略构造函数实现
    }
  }
  final AtomicReference<WMRange>
    rf = new AtomicReference<>(
      new WMRange(0,0)
    );
  // 设置库存上限
  void setUpper(int v){
    WMRange nr;
    WMRange or = rf.get();
    do{
      // 检查参数合法性
      if(v < or.lower){
        throw new IllegalArgumentException();
      }
      nr = new
        WMRange(v, or.lower);
    }while(!rf.compareAndSet(or, nr));
  }
}问题在哪里？
WMRange or = rf.get();应该放到do{}里面，否则循环里每次拿到的不是内存中的最新值（可能被其它线程修改），导致出现死循环。


