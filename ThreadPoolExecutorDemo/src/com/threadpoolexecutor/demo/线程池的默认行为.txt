线程池默认的工作行为：
1）不会初始化 corePoolSize个线程，有任务来了才创建工作线程；
2）当核心线程满了之后不会立即扩容线程池，而是把任务堆积到工作队列中；
3）当工作队列满了后扩容线程池，一直到线程个数达到 maximumPoolSize 为止；
4）如果队列已满且达到了最大线程后还有任务进来，按照拒绝策略处理；
5）当线程数大于核心线程数时，线程等待 keepAliveTime 后还是没有任务需要处理的话，收缩线程到核心线程数。
我们也可以通过一些手段来改变这些默认工作行为，比如：
声明线程池后立即调用 prestartAllCoreThreads 方法，来启动所有核心线程；
传入 true 给 allowCoreThreadTimeOut 方法，来让线程池在空闲的时候同样回收核心线程。

可以这样，每秒输出线程池的状态，来观察线程池的状态：
private void printStats(ThreadPoolExecutor threadPool) {
   Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(() -> {
        log.info("=========================");
        log.info("Pool Size: {}", threadPool.getPoolSize());
        log.info("Active Threads: {}", threadPool.getActiveCount());
        log.info("Number of Tasks Completed: {}", threadPool.getCompletedTaskCount());
        log.info("Number of Tasks in Queue: {}", threadPool.getQueue().size());

        log.info("=========================");
    }, 0, 1, TimeUnit.SECONDS);
}


我们有没有办法让线程池更激进一点，优先开启更多的线程，而把队列当成一个后备方案呢？

限于篇幅，这里我只给你一个大致思路：
1）由于线程池在工作队列满了无法入队的情况下会扩容线程池，那么我们是否可以重写队列的 offer 方法，造成这个队列已满的假象呢？
2）由于我们 Hack 了队列，在达到了最大线程后势必会触发拒绝策略，那么能否实现一个自定义的拒绝策略处理程序，这个时候再把任务真正插入队列呢？
Tomcat 线程池也实现了类似的效果，可供借鉴：
实现自己的RejectedExecutionHandler耦合自己的Queue也无可厚非。
Tomcat参考这里：https://github.com/apache/tomcat/blob/a801409b37294c3f3dd5590453fb9580d7e33af2/java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java